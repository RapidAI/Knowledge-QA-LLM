<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knowledge-QA-LLM Documentation</title>
    <link>https://rapidai.github.io/Knowledge-QA-LLM/</link>
    <description>Recent content on Knowledge-QA-LLM Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://rapidai.github.io/Knowledge-QA-LLM/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>概览</title>
      <link>https://rapidai.github.io/Knowledge-QA-LLM/docs/overview/</link>
      <pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rapidai.github.io/Knowledge-QA-LLM/docs/overview/</guid>
      <description>&amp;nbsp; 🧐 Knowledge QA LLM &amp;nbsp; Introduction link Questions &amp;amp; Answers based on local knowledge base + LLM. Reason: The idea of this project comes from Langchain-Chatchat I have used this project before, but it is not very flexible and deployment is not very friendly. Learn from the ideas in How to build a knowledge question answering system with a large language model, and try to use this as a practice.</description>
    </item>
    
    <item>
      <title>快速开始</title>
      <link>https://rapidai.github.io/Knowledge-QA-LLM/docs/quickstart/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rapidai.github.io/Knowledge-QA-LLM/docs/quickstart/</guid>
      <description>1. 克隆整个项目到本地 link git clone https://github.com/RapidAI/Knowledge-QA-LLM.git 2. 安装运行环境 link cd Knowledge-QA-LLM pip install -r requirements.txt 3. 下载提取向量模型到本地 link本项目目前以Moka-AI的m3e模型作为提取特征向量的主要模型，当然其他模型，也可自行配置。
将moka-ai/m3e-small下载下来放到assets/models/m3e-small目录下，下载命令如下：
from sentence_transformers import SentenceTransformer # 指定cache_dir即可 model = SentenceTransformer(&amp;#34;moka-ai/m3e-small&amp;#34;, cache_folder=&amp;#34;assets/models&amp;#34;) # 验证是否可用 sentences = [&amp;#34;* Moka 此文本嵌入模型由 MokaAI 训练并开源，训练脚本使用 uniem&amp;#34;,] embeddings = model.encode(sentences) for sentence, embedding in zip(sentences, embeddings): print(&amp;#34;Sentence:&amp;#34;, sentence) print(&amp;#34;Embedding:&amp;#34;, embedding) print(&amp;#34;&amp;#34;) 4. 配置LLM API接口 link首先需要单独在本地部署大模型，以API方式启动。以ChatGLM-6B为例，具体可参考ChatGLM2-6B API
随后，knowledge_qa_llm/llm/chatglm2_6b.py是调用上一步LLM接口的类。
如果自己使用的LLM，没有该文件，可自行实现，保证输入和输出与现有的一致即可。
5. 更改config.yaml配置文件 link将调用ChatGLM-6B的llm_api的url写到knowledge_qa_llm/config.yaml配置文件中
LLM_API: ChatGLM2_6B: your_api 6. 运行 link info streamlit框架的启动，不可以用python webui.</description>
    </item>
    
    <item>
      <title>在线demo</title>
      <link>https://rapidai.github.io/Knowledge-QA-LLM/docs/online_demo/</link>
      <pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rapidai.github.io/Knowledge-QA-LLM/docs/online_demo/</guid>
      <description>简介 link在线demo是基于百度的AI Studio平台搭建，基于文心一言大模型的接口搭建。
因为该项目核心在于利用大模型的总结和提取能力，主打离线私有部署，但是一直没有一个在线demo供大家查看效果。因此有了基于文心一言版的 🧐 Knowledge QA LLM。
Demo源码 link文心一言版的源码与Github仓库代码，有些许初入，后续会同步。 地址： https://aistudio.baidu.com/projectdetail/6675380?contributionType=1
在线Demo link notifications 该Demo主要侧重查看效果，至于工程化则差一些。 Knowledge-QA-LLM: https://aistudio.baidu.com/application/detail/7580</description>
    </item>
    
    <item>
      <title>支持的LLM</title>
      <link>https://rapidai.github.io/Knowledge-QA-LLM/docs/blog/supported_llm/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rapidai.github.io/Knowledge-QA-LLM/docs/blog/supported_llm/</guid>
      <description>✔ ChatGLM2-6B
✔ BaiChuan-7B
✔ Qwen-7B
✔ llama2
✔ InternLM-7b</description>
    </item>
    
    <item>
      <title>自定义LLM API</title>
      <link>https://rapidai.github.io/Knowledge-QA-LLM/docs/blog/custom_llm_api/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rapidai.github.io/Knowledge-QA-LLM/docs/blog/custom_llm_api/</guid>
      <description>引言 link info 该项目的LLM部分是独立的，用户可在 **knowledge_qa_llm/llm** 自定义配置所需的LLM接口。 下面以自定义支持InterLM-7b大模型为例，说明如何支持的。前提是本地满足部署LLM的推理条件。
步骤如下： link1. 部署LLM模型到本地 link具体如何下载，参见Hugging Face中internlm-7b。
2. 编写模型的部署推理代码 link这一点可以参考ChatGLMAPI的实现。只需要替换模型加载部分为InternLM的即可。具体如下：
from fastapi import FastAPI, Request from transformers import AutoTokenizer, AutoModel import uvicorn, json, datetime import torch DEVICE = &amp;#34;cuda&amp;#34; DEVICE_ID = &amp;#34;0&amp;#34; CUDA_DEVICE = f&amp;#34;{DEVICE}:{DEVICE_ID}&amp;#34; if DEVICE_ID else DEVICE def torch_gc(): if torch.cuda.is_available(): with torch.cuda.device(CUDA_DEVICE): torch.cuda.empty_cache() torch.cuda.ipc_collect() app = FastAPI() @app.post(&amp;#34;/&amp;#34;) async def create_item(request: Request): global model, tokenizer json_post_raw = await request.json() json_post = json.dumps(json_post_raw) json_post_list = json.</description>
    </item>
    
    <item>
      <title>给作者加油</title>
      <link>https://rapidai.github.io/Knowledge-QA-LLM/docs/sponsor/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rapidai.github.io/Knowledge-QA-LLM/docs/sponsor/</guid>
      <description>写在前面 linkI like open source and AI technology because I think open source and AI will bring convenience and help to people in need, and will also make the world a better place. By donating to these projects, you can join me in making AI bring warmth and beauty to more people.
我喜欢开源，喜欢AI技术，因为我认为开源和AI会为有需要的人带来方便和帮助，也会让这个世界变得更好。通过对这些项目的捐赠，您可以和我一道让AI为更多人带来温暖和美好。
知识星球RapidAI私享群 link这里的提问会优先得到回答和支持，也会享受到RapidAI组织后续持续优质的服务，欢迎大家的加入。
支付宝或微信打赏 (Alipay reward or WeChat reward) link通过支付宝或者微信给作者打赏，请写好备注。 Give the author a reward through Alipay or WeChat.</description>
    </item>
    
    <item>
      <title>更新日志</title>
      <link>https://rapidai.github.io/Knowledge-QA-LLM/docs/changelog/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://rapidai.github.io/Knowledge-QA-LLM/docs/changelog/</guid>
      <description>2023-09-07 v0.0.9 update: link Add tips when database is empty. 2023-08-29 v0.0.8 update: link Fixed missing embedding_extract Fixed default parameters of LLM 2023-08-11 v0.0.7 update: link Optimize layout, remove the plugin option, and put the extract vector model option on the home page. The tips are translated into English for easy communication. Add project logo:🧐 Update CLI module code. 2023-08-05 v0.0.6 update: link Adapt more llm_api, include online llm api, such ad ERNIE-Bot-Turbo.</description>
    </item>
    
  </channel>
</rss>
